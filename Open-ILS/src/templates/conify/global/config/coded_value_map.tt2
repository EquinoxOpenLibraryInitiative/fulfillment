[% WRAPPER base.tt2 %]
<h1>[% l('Coded Value Maps') %]</h1> <br/>

<div dojoType="dijit.layout.ContentPane" layoutAlign="client" class='oils-header-panel'>
    <div>[% l('Coded Value Maps') %]</div>
    <div>
        <button dojoType='dijit.form.Button' onClick='ccvmGrid.showCreateDialog()'>[% l('New Map') %]</button>
        <button dojoType='dijit.form.Button' onClick='ccvmGrid.deleteSelected()'>[% l('Delete Selected') %]</button>
        <button dojoType='dijit.form.Button' onClick='ccvmGrid.showClonePane(handleClone)'>[% l('Clone Selected') %]</button>
    </div>
</div>

<div dojoType="dijit.layout.ContentPane" layoutAlign="client">
    <span>[% l('Record Attribute Type: ') %]</span><div id='attr-def-div'></div>
</div>

<div dojoType="dijit.layout.ContentPane" layoutAlign="client">
    <table  jsId="ccvmGrid"
            autoHeight='true'
            dojoType="openils.widget.AutoGrid"
            fieldOrder="['ctype', 'code', 'value', 'description', 'opac_visible', 'search_label', 'is_simple', 'composite_def']"
            query="{code: '*'}"
            defaultCellWidth='"25%"'
            fmClass='ccvm'
            showPaginator='true'
            editOnEnter='true'>
      <thead>
        <tr><th field='composite_def' 
                get='getCompositeDefLink' 
                formatter='formatCompositeDefLink'>
            [% l('Composite Definition') %]</th></tr>
      </thead>
    </table>
 </div>

<script type ="text/javascript">

    dojo.require('dijit.form.FilteringSelect');
    dojo.require('openils.widget.AutoGrid');
    dojo.require('openils.widget.AutoFieldWidget');
    dojo.require('openils.PermaCrud');

    function getCompositeDefLink(rowId, item) {
      if (!item) return '';
      return this.grid.store.getValue(item, 'id');
    }

    var isComposite = false;
    function formatCompositeDefLink(id) {
      if (id && isComposite) {
        return "<a href='" + oilsBasePath +
          "/conify/global/config/composite_attr_entry_definition/" 
          + id + "'>[% l('Manage') %]</a>";
        } else {
          return "";
      }
    }

    var cradName = '[% ctx.page_args.0 %]';

    function handleClone(oldObj, newObj) {
      if (!isComposite) return; // vanilla, non-composite clone

      // fetch the composite def for the clone source object
      var pcrud = new openils.PermaCrud();
      pcrud.search('ccraed', {coded_value : oldObj.id}, {

        oncomplete : function(r) {
          composite_def = openils.Util.readResponse(r).pop();

          // after cloning, jump to the composite def page
          var dest = oilsBasePath
            + '/conify/global/config/composite_attr_entry_definition/' 
            + newObj.id();

          if (!composite_def || !composite_def.definition()) {
            // nothing to copy
            location.href = dest;
            return;
          }

          // copy the composite definition from the clone
          // source object into the clone destination object
          var new_def = new fieldmapper.ccraed();
          new_def.coded_value(newObj.id());
          new_def.definition(composite_def.definition());
          pcrud.create(new_def, {
            oncomplete : function(r) {
              openils.Util.readResponse(r); // test for alerts
              location.href = dest;
            }
          });
        }
      });
    }

    openils.Util.addOnLoad(
        function() {

            var selector = new openils.widget.AutoFieldWidget({
                fmClass : 'ccvm',
                fmField : 'ctype',
                parentNode : dojo.byId('attr-def-div')
            });

            selector.build(
                function(w, ww) {
                    dojo.connect(w, 'onChange', 
                        function(newVal) {

                            // see if this attr def supports composite entries
                            w.store.fetch({
                              onComplete : function(list) {
                                if (!list.length) return;
                                var comp = w.store.getValue(list[0], 'composite');
                                if (comp == 't') {
                                  isComposite = true;
                                } else {
                                  isComposite = false;
                                }
                              },
                              query : {name : ''+newVal}
                            });
                            
                            ccvmGrid.resetStore();
                            ccvmGrid.loadAll({order_by : {ccvm : 'code'}}, {ctype : newVal});
                            ccvmGrid.overrideWidgetArgs.ctype = {dijitArgs : {value : newVal}};
                            // ^-- why is this not working?
                        }
                    );

                    // if a crad is already selected via URL, fetch the ccvm's
                    if (cradName) w.attr('value', cradName);
                }
            );

            // hide the progress indicator since we're not loading any data up front
            dojo.style(ccvmGrid.loadProgressIndicator, 'visibility', 'hidden');
        }
    );

</script>

[% END %]
