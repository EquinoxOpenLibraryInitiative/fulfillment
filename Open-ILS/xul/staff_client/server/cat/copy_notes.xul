<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Patron Display -->
<!--
 vim:noet:sw=4:ts=4
-->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- STYLESHEETS -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/patron_display.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window PUBLIC "" ""[
    <!--#include virtual="/opac/locale/${locale}/lang.dtd"-->
]>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>

<window id="copy_notes_win" width="700" height="550"
    oils_persist="height width sizemode"
    title="&staff.cat.copy_editor.copy_notes.label;"
    onload="try{ my_init(); font_helper(); persist_helper(); } catch(E) { alert(E); }"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
    <!-- BEHAVIOR -->
        <script type="text/javascript">var myPackageDir = 'open_ils_staff_client'; var IAMXUL = true; var g = {};</script>
        <scripts id="openils_util_scripts"/>

    <script type="text/javascript" src="/xul/server/main/JSAN.js"/>
    <script>
    <![CDATA[

        function $(id) { return document.getElementById(id); }

        function my_init() {
            try {
                if (typeof JSAN == 'undefined') { 
                    throw( $("commonStrings").getString('common.jsan.missing') );
                }
                JSAN.errorLevel = "die"; // none, warn, or die
                JSAN.addRepository('/xul/server/');

                JSAN.use('util.error'); g.error = new util.error();
                JSAN.use('util.network'); g.network = new util.network();
                JSAN.use('util.date'); JSAN.use('util.money'); 
                JSAN.use('OpenILS.data'); g.data = new OpenILS.data(); g.data.init({'via':'stash'});

                g.error.sdump('D_TRACE','my_init() for copy_notes.xul');

                g.copy_id = xul_param('copy_id');

                refresh();

            } catch(E) {
                var err_msg = $("commonStrings").getFormattedString('common.exception', ['cat/copy_notes.xul', js2JSON(E)]);
                try { g.error.sdump('D_ERROR',err_msg); } catch(E) { dump(err_msg); }
                alert(err_msg);
            }
        }

        function refresh() {
            retrieve_notes(); render_notes();
        }

        function retrieve_notes() {
            g.notes = g.network.simple_request('FM_ACPN_RETRIEVE_ALL',[ { 'authtoken' : ses(), 'itemid' : g.copy_id } ]).reverse();
        }

        function apply(node,field,value) {
            util.widgets.apply(
                node,'name',field,
                function(n) {
                    switch(n.nodeName) {
                        case 'description' : n.appendChild( document.createTextNode( value ) ); break;
                        case 'label' : n.value = value; break;
                        default : n.value = value; break;
                    }
                }
            );
        }

        function render_notes() {
            JSAN.use('util.widgets'); util.widgets.remove_children('notes_panel');
            var np = $('notes_panel');
                var hbox = document.createElement('hbox'); np.appendChild(hbox);
                    var btn = document.createElement('button'); hbox.appendChild(btn);
                        btn.setAttribute('label', $('catStrings').getString('staff.cat.copy_notes.render_notes.label'));
                        btn.setAttribute('accesskey', $('catStrings').getString('staff.cat.copy_notes.render_notes.accesskey'));
                        btn.setAttribute('oncommand','new_note()');

            for (var i = 0; i < g.notes.length; i++) {

                /* template */
                var node = $('note_template').cloneNode(true); np.appendChild(node); node.hidden = false;
                apply(node,'create_date', util.date.formatted_date( g.notes[i].create_date(), '%{localized}' ));
                util.widgets.apply(node,'name','create_date',
                    function(n) {
                        n.setAttribute(
                            "tooltiptext",
                            $('catStrings').getString('staff.cat.copy_notes.widgets_apply.note_id') + " "
                            + g.notes[i].id() + " " 
                            + $('catStrings').getString('staff.cat.copy_notes.widgets_apply.creator_id') + " "
                            + g.notes[i].creator()
                        );
                    }
                );
                apply(node,'title',g.notes[i].title());
                apply(node,'pub',get_bool( g.notes[i].pub() ) ? $('catStrings').getString('staff.cat.copy_notes.widgets.public') : $('catStrings').getString('staff.cat.copy_notes.widgets.private'));
                apply(node,'value',g.notes[i].value());
                apply(node,'id',g.notes[i].id());
                apply(node,'creator',g.notes[i].creator());

                /* button bar */
                var hb = document.createElement('hbox'); np.appendChild(hb);
                    var btn1 = document.createElement('button'); hb.appendChild(btn1);
                        btn1.setAttribute('label', $('catStrings').getString('staff.cat.copy_notes.delete_note.label'));
                        btn1.setAttribute('image',"/xul/server/skin/media/images/up_arrow.gif");

                        btn1.addEventListener(
                            'command',
                            function(id){ return function() { 
                                var r = g.error.yns_alert(
                                    $('catStrings').getFormattedString('staff.cat.copy_notes.delete_note.prompt.msg', [g.notes[id].title(), util.date.formatted_date( g.notes[id].create_date(), '%{localized}')]),
                                    $('catStrings').getString('staff.cat.copy_notes.delete_note.prompt.title'),
                                    $('catStrings').getString('staff.cat.copy_notes.delete_note.prompt.yes'),
                                    $('catStrings').getString('staff.cat.copy_notes.delete_note.prompt.no'),
                                    null,
                                    $('commonStrings').getString('common.confirm')
                                ); 
                                if (r == 0) {
                                    g.network.simple_request('FM_ACPN_DELETE',[ses(),g.notes[id].id()]);
                                    setTimeout(function() { 
                                        alert($('catStrings').getString('staff.cat.copy_notes.delete_note.success'));
                                        refresh(); },0
                                    );
                                }
                            } }(i),
                            false
                        );
                    var spacer = document.createElement('spacer'); hb.appendChild(spacer); spacer.flex = 1;
                    var btn2 = document.createElement('button'); hb.appendChild(btn2);
                        btn2.setAttribute('label', $('catStrings').getString('staff.cat.copy_notes.delete_note.close_window'));
                        btn2.setAttribute('accesskey', $('catStrings').getString('staff.cat.copy_notes.delete_note.close_window.accesskey'));
                        btn2.setAttribute('oncommand','window.close();');
            }

        }
        
        function new_note() {
            try {
                var xml = '<groupbox xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" flex="1"> \
                    <caption label="' + $('catStrings').getString('staff.cat.copy_notes.new_note.label') + '"/> \
                    <grid flex="1"><columns><column/><column flex="1"/></columns> \
                        <rows> \
                            <row><label value="' + $('catStrings').getString('staff.cat.copy_notes.new_note.public') + '"/><checkbox id="pub" name="fancy_data" checked="false"/></row> \
                            <row><label value="' + $('catStrings').getString('staff.cat.copy_notes.new_note.title') + '"/><textbox id="title" name="fancy_data" context="clipboard"/></row> \
                            <row><label value="' + $('catStrings').getString('staff.cat.copy_notes.new_note.note') + '"/><textbox multiline="true" id="note" name="fancy_data" context="clipboard"/></row>';
                var show_initials = String( g.data.hash.aous['ui.staff.require_initials.copy_notes'] ) == 'true';
                if (show_initials) {
                    xml += '<row><label value="'+$("catStrings").getString('staff.cat.copy_notes.new_note.initials')+'"/><textbox id="initials" name="fancy_required_data" context="clipboard"/></row>';
                }
                xml += '<row><spacer/><hbox> \
                                <button label="' + $('catStrings').getString('staff.cat.copy_notes.new_note.cancel.label') + '" name="fancy_cancel" accesskey="' + $('catStrings').getString('staff.cat.copy_notes.new_note.cancel.accesskey') + '"/> \
                                <button label="' + $('catStrings').getString('staff.cat.copy_notes.new_note.add_note.label') + '" accesskey="' + $('catStrings').getString('staff.cat.copy_notes.new_note.add_note.accesskey') + '" name="fancy_submit"/></hbox></row> \
                        </rows></grid></groupbox>';
                JSAN.use('util.window'); var win = new util.window();
                var fancy_prompt_data = win.open(
                    urls.XUL_FANCY_PROMPT,
                    'fancy_prompt', 'chrome,resizable,modal,width=700,height=500',
                    { 'xml' : xml, 'focus' : 'title', 'title' : $('catStrings').getString('staff.cat.copy_notes.new_note.add_note.label') }
                );
                if (fancy_prompt_data.fancy_status == 'complete') {
                    //alert(js2JSON(g.data.fancy_prompt_data));
                    var note = new acpn();
                    note.isnew(1);
                    note.title( fancy_prompt_data.title );
                    if (fancy_prompt_data.initials) {
                        fancy_prompt_data.note = fancy_prompt_data.note 
                            + $("commonStrings").getFormattedString('staff.initials.format',[fancy_prompt_data.initials,util.date.formatted_date(new Date(),'%{localized_date}'), ses('ws_ou_shortname')]);
                    }
                    note.value( fancy_prompt_data.note );
                    note.pub( get_bool( fancy_prompt_data.pub ) ? get_db_true() : get_db_false() );
                    note.owning_copy( g.copy_id );
                    var r = g.network.simple_request('FM_ACPN_CREATE',[ ses(), note ]);
                    if (typeof r.ilsevent != 'undefined') throw(r);
                    setTimeout(function() {
                        refresh();},0
                    );
                }
            } catch(E) {
                g.error.standard_unexpected_error_alert($('catStrings').getString('staff.cat.copy_notes.new_note.error'),E);
            }
        }

    ]]>
    </script>

    <messagecatalog id="catStrings" src="/xul/server/locale/<!--#echo var='locale'-->/cat.properties" />
    <messagecatalog id="circStrings" src="/xul/server/locale/<!--#echo var='locale'-->/circ.properties" />

    <stack hidden="true" id="note_template" flex="1">
        <groupbox flex="1" style="background-color: black;"/>
        <groupbox flex="1" style="background-color: #FFDE00; border-top-right-radius: 35px;" >
            <hbox>
                <description name="title" class="copyable" style="font-weight: bold"/>
                <spacer flex="1"/>
                <description name="create_date" class="copyable" style="font-weight: bold"/>
                <description name="pub" class="copyable" style="font-weight: bold"/>
            </hbox>
            <description class="copyable" name="value"/>
        </groupbox>
    </stack>

    <vbox flex="1" class="my_overflow" id="notes_panel">
    </vbox>


</window>

