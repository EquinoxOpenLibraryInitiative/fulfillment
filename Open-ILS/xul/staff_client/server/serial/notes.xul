<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Serial Notes -->
<!--
 vim:noet:sw=4:ts=4
-->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- STYLESHEETS -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://open_ils_staff_client/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/patron_display.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window PUBLIC "" ""[
	<!--#include virtual="/opac/locale/${locale}/lang.dtd"-->
]>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>

<window id="notes_win" width="700" height="550" oils_persist="height width sizemode"
	onload="try{ my_init(); font_helper(); persist_helper(); } catch(E) { alert(E); }"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- BEHAVIOR -->
        <script type="text/javascript">var myPackageDir = 'open_ils_staff_client'; var IAMXUL = true; var g = {};</script>
        <scripts id="openils_util_scripts"/>

	<script type="text/javascript" src="/xul/server/main/JSAN.js"/>
	<script>
	<![CDATA[

		function $(id) { return document.getElementById(id); }

		function my_init() {
			try {
				if (typeof JSAN == 'undefined') { 
					throw( $("commonStrings").getString('common.jsan.missing') );
				}
				JSAN.errorLevel = "die"; // none, warn, or die
				JSAN.addRepository('/xul/server/');

				JSAN.use('util.error'); g.error = new util.error();
				JSAN.use('util.network'); g.network = new util.network();
				JSAN.use('util.date'); JSAN.use('util.money'); 
				JSAN.use('OpenILS.data'); g.data = new OpenILS.data(); g.data.init({'via':'stash'});

				g.error.sdump('D_TRACE','my_init() for notes.xul');

				g.notes = xul_param('notes');
				g.disable_create = xul_param('disable_create');
				// in the code below, by default, function_type and
				// fm_type (aka classname) are assumed the same other
				// than case
				if (g.notes) { // we have the notes passed in
					g.function_type_map = xul_param('function_type_map');
					if (!g.function_type_map) { // didn't get one, build one
						g.function_type_map = {};
						for (i = 0; i < g.notes.length; i++) {
							g.function_type_map[g.notes[i].classname] = g.notes[i].classname.toUpperCase();
						}
					}
					g.section_titles = xul_param('section_titles');
					g.section_id_names = xul_param('section_id_names');
				} else { // we need to retreieve the notes
					g.object_type = xul_param('object_type');
					g.object_id = xul_param('object_id');
					function_type = xul_param('function_type');
					g.fm_type = xul_param('fm_type');
					if (!g.fm_type) {
						g.fm_type = function_type.toLowerCase();
					}
					g.function_type = function_type;
					g.function_type_map = {};
					g.function_type_map[g.fm_type] = function_type;
					g.constructor = xul_param('constructor');
				}

				var window_title = xul_param('title',{'modal_xulG':true});
				if (window_title) {
					try { document.title = window_title; } catch(E) {}
				}

				refresh();

			} catch(E) {
				var err_msg = $("commonStrings").getFormattedString('common.exception', ['serial/notes.xul', js2JSON(E)]);
				try { g.error.sdump('D_ERROR',err_msg); } catch(E) { dump(err_msg); }
				alert(err_msg);
			}
		}

		function refresh() {
			retrieve_notes(); render_notes();
		}

		function retrieve_notes() {
			if (g.notes) return;
			g.notes = g.network.simple_request(
				'FM_' + g.function_type_map[g.fm_type] + '_RETRIEVE_ALL', [
					{ 'authtoken' : ses(), 'object_id' : g.object_id }
				]
			);
		}

		function apply(node,field,value) {
			util.widgets.apply(
				node,'name',field,
				function(n) {
					switch(n.nodeName) {
						case 'description' : n.appendChild( document.createTextNode( value ) ); break;
						case 'image' : n.src = value; break;
						default : n.value = value; break;
					}
				}
			);
		}

		function render_notes() {
			JSAN.use('util.widgets'); util.widgets.remove_children('notes_panel');
			var np = $('notes_panel');
			if (!g.disable_create) {
				var hbox = document.createElement('hbox'); np.appendChild(hbox);
					var btn = document.createElement('button'); hbox.appendChild(btn);
						btn.setAttribute('label', $('catStrings').getString('staff.cat.copy_notes.render_notes.label'));
						btn.setAttribute('accesskey', $('catStrings').getString('staff.cat.copy_notes.render_notes.accesskey'));
						btn.setAttribute('oncommand','new_note()');
			}

			var hb; // keep button bar reference for adding close button
			var section_type;
			var section_id;
			var section_indices = {};
			for (var i = 0; i < g.notes.length; i++) {
				var note = g.notes[i];

				if (g.section_titles) {
					if (note.classname != section_type || note[g.section_id_names[note.classname]]() != section_id) {
						section_type = note.classname;
						if (!(section_type in section_indices)) {
							section_indices[section_type] = 0;
						} else {
							section_indices[section_type]++;
						}
						var section_title = g.section_titles[section_type][section_indices[section_type]];
						section_id = note[g.section_id_names[section_type]]();

						// add the title to the window
						var hbox = document.createElement('hbox');
						np.appendChild(hbox);
						var desc = document.createElement('description');
						desc.appendChild(document.createTextNode(section_title));
						hbox.appendChild(desc);
					}
				}

				/* template */
				var node = $('note_template').cloneNode(true); np.appendChild(node); node.hidden = false;
				apply(node,'create_date',note.create_date().toString().substr(0,10));
				util.widgets.apply(node,'name','create_date',
					function(n) {
						n.setAttribute(
							"tooltiptext",
							$('catStrings').getString('staff.cat.copy_notes.widgets_apply.note_id') + " "
							+ note.id() + " "
							+ $('catStrings').getString('staff.cat.copy_notes.widgets_apply.creator_id') + " "
							+ note.creator()
						);
					}
				);
				apply(node,'title',note.title());
				apply(node,'pub',get_bool( g.notes[i].pub() ) ? $('catStrings').getString('staff.cat.copy_notes.widgets.public') : $('catStrings').getString('staff.cat.copy_notes.widgets.private'));
				apply(node,'alert',get_bool( g.notes[i].alert() ) ? '/xul/server/skin/media/images/bell.png' : '');
				apply(node,'value',g.notes[i].value());
				apply(node,'id',g.notes[i].id());
				apply(node,'creator',g.notes[i].creator());

				/* button bar */
				hb = document.createElement('hbox'); np.appendChild(hb);
					var btn0 = document.createElement('button'); hb.appendChild(btn0);
						btn0.setAttribute('label', $('serialStrings').getString('staff.serial.notes.do_edit_note.label'));
						btn0.setAttribute('image',"/xul/server/skin/media/images/up_arrow.gif");

						btn0.addEventListener(
							'command',
							function(index){ return function() { new_note(index) } }(i),
							false
						);
					var btn1 = document.createElement('button'); hb.appendChild(btn1);
						btn1.setAttribute('label', $('catStrings').getString('staff.cat.copy_notes.delete_note.label'));
						btn1.setAttribute('image',"/xul/server/skin/media/images/up_arrow.gif");

						btn1.addEventListener(
							'command',
							function(index){ return function() { 
								var r = g.error.yns_alert(
									$('catStrings').getFormattedString('staff.cat.copy_notes.delete_note.prompt.msg', [g.notes[index].title(), g.notes[index].create_date().toString().substr(0,10)]),
									$('catStrings').getString('staff.cat.copy_notes.delete_note.prompt.title'),
									$('catStrings').getString('staff.cat.copy_notes.delete_note.prompt.yes'),
									$('catStrings').getString('staff.cat.copy_notes.delete_note.prompt.no'),
									null,
									$('commonStrings').getString('common.confirm')
								); 
								if (r == 0) {
									g.network.simple_request('FM_'+g.function_type_map[g.notes[index].classname]+'_DELETE',[ses(),g.notes[index].id()]);
									g.notes.splice(index, 1);
									setTimeout(function() { 
										alert($('catStrings').getString('staff.cat.copy_notes.delete_note.success'));
										refresh(); },0
									);
									if(!xulG.notes_updated) xulG.notes_updated = {};
									xulG.notes_updated[g.notes[index].classname] = 1;
								}
							} }(i),
							false
						);
			}

			// add close button
			if (!hb) { // no notes yet, fill the space and add a bar
				var spacer = document.createElement('spacer'); np.appendChild(spacer); spacer.flex = 1;
				hb = document.createElement('hbox'); np.appendChild(hb);
			}
			var spacer = document.createElement('spacer');
			hb.appendChild(spacer); spacer.flex = 1;
			var btn2 = document.createElement('button'); hb.appendChild(btn2);
			btn2.setAttribute('label', $('catStrings').getString('staff.cat.copy_notes.delete_note.close_window'));
			btn2.setAttribute('oncommand','window.close();');

		}
		
		function xml_encode(str) {
			return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
		}

		function new_note(index) {
			var public = false;
			var alert = false;
			var title = '';
			var value = '';
			var edit_mode; // for clarity
			var label_text;
			var button_accesskey;
			var note_fm_type;

			if (typeof index != 'undefined') {
				edit_mode = true;
				public = get_bool(g.notes[index].pub());
				alert = get_bool(g.notes[index].alert());
				title = xml_encode(g.notes[index].title());
				value = xml_encode(g.notes[index].value());
				note_fm_type = g.notes[index].classname;
				label_text = $('serialStrings').getString('staff.serial.notes.edit_note.label');
				button_accesskey = $('serialStrings').getString('staff.serial.notes.edit_note.accesskey');
			} else {
				note_fm_type = g.fm_type;
				label_text = $('catStrings').getString('staff.cat.copy_notes.new_note.add_note.label');
				button_accesskey = $('catStrings').getString('staff.cat.copy_notes.new_note.add_note.accesskey');
			}

			try {
				value = value.replace(/\n/g, "&#10;"); // preserve newlines
				var xml = '<groupbox xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" flex="1"> \
					<caption label="' + label_text + '"/> \
					<grid flex="1"><columns><column/><column flex="1"/></columns> \
						<rows> \
							<row><label value="' + $('catStrings').getString('staff.cat.copy_notes.new_note.public') + '"/><checkbox id="pub" name="fancy_data" checked="' + public + '"/></row> \
							<row><label value="' + fieldmapper.IDL.fmclasses[note_fm_type].field_map.alert.label + '"/><checkbox id="alert" name="fancy_data" checked="' + alert + '"/></row> \
							<row><label value="' + $('catStrings').getString('staff.cat.copy_notes.new_note.title') + '"/><textbox id="title" name="fancy_data" context="clipboard" value="' + title + '"/></row> \
							<row><label value="' + $('catStrings').getString('staff.cat.copy_notes.new_note.note') + '"/><textbox multiline="true" id="note" name="fancy_data" context="clipboard" value="' + value + '"/></row> \
							<row><spacer/><hbox> \
								<button label="' + $('catStrings').getString('staff.cat.copy_notes.new_note.cancel.label') + '" name="fancy_cancel" accesskey="' + $('catStrings').getString('staff.cat.copy_notes.new_note.cancel.accesskey') + '"/> \
								<button label="' + label_text + '" accesskey="' + button_accesskey + '" name="fancy_submit"/></hbox></row> \
						</rows></grid></groupbox>';
				JSAN.use('util.window'); var win = new util.window();
				var fancy_prompt_data = win.open(
					urls.XUL_FANCY_PROMPT,
					'fancy_prompt', 'chrome,resizable,modal,width=700,height=500',
					{ 'xml' : xml, 'focus' : 'title', 'title' : label_text }
				);
				if (fancy_prompt_data.fancy_status == 'complete') {
					var note;
					if (edit_mode) {
						note = g.notes[index];
					} else {
						note = new g.constructor();
						note.isnew(1);
						note[g.object_type]( g.object_id );
					}
					note.title( fancy_prompt_data.title );
					note.value( fancy_prompt_data.note );
					note.pub( get_bool( fancy_prompt_data.pub ) ? get_db_true() : get_db_false() );
					note.alert( get_bool( fancy_prompt_data.alert ) ? get_db_true() : get_db_false() );
					var r = g.network.simple_request('FM_'+g.function_type_map[note.classname]+'_UPDATE',[ ses(), note ]);
					if (typeof r.ilsevent != 'undefined') throw(r);
					// not every note type support pcrud, so we can't do this
					// for now, if they pass in a pile of notes (g.notes mode),
					// they simply won't be able to add notes
					// One alternative would be to teach the UPDATE functions
					// to send back the updated note objects
					/*
					if (!edit_mode) { // fetch new note and add to pile
						note = g.network.request(
							'open-ils.pcrud',
							'open-ils.pcrud.retrieve.' + note.classname,
							[ ses(), r ]
						);
						g.notes.push(note);
					}
					*/
					if (!edit_mode) { // force re-fetch of notes
						g.notes = undefined;
					}
					if(!xulG.notes_updated) xulG.notes_updated = {};
					xulG.notes_updated[note.classname] = 1;
					setTimeout(function() {
						refresh();},0
					);
				}
			} catch(E) {
				g.error.standard_unexpected_error_alert($('catStrings').getString('staff.cat.copy_notes.new_note.error'),E);
			}
		}

	]]>
	</script>

	<messagecatalog id="catStrings" src="/xul/server/locale/<!--#echo var='locale'-->/cat.properties" />
	<messagecatalog id="serialStrings" src="/xul/server/locale/<!--#echo var='locale'-->/serial.properties" />

	<stack hidden="true" id="note_template" flex="1">
		<vbox flex="1" style="background-color: black; margin:3px"/>
		<vbox flex="1" style="background-color: #FFDE00; border-top-right-radius: 35px; border: 2px groove ThreeDFace; margin:3px;" >
			<hbox align="start">
				<description name="title" style="font-weight: bold"/>
				<spacer flex="1"/>
				<description name="create_date" style="font-weight: bold"/>
				<description name="pub" style="font-weight: bold"/>
				<image name="alert" src=""/>
			</hbox>
			<description style="white-space: pre-wrap;" name="value"/>
		</vbox>
	</stack>

	<vbox flex="1" class="my_overflow" id="notes_panel">
	</vbox>


</window>

