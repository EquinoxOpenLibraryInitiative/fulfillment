<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Patron Display -->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- STYLESHEETS -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/patron_display.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window PUBLIC "" ""[
    <!--#include virtual="/opac/locale/${locale}/lang.dtd"-->
]>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>

<window id="patron_info_win" width="700" height="550"
    onload="try{ my_init(); font_helper(); persist_helper(); } catch(E) { alert(E); }"
    onunload="try { my_cleanup(); persist_helper_cleanup(); } catch(E) { alert(E); }"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
    <!-- BEHAVIOR -->
    <script type="text/javascript">
        var myPackageDir = 'open_ils_staff_client';
        var IAMXUL = true;
        var g = {};
    </script>
    <scripts id="openils_util_scripts"/>

    <script type="text/javascript" src="/xul/server/main/JSAN.js"/>
    <script>
    <![CDATA[

        function $(id) { return document.getElementById(id); }

        function my_init() {
            try {
                if (typeof JSAN == 'undefined') { throw( $("commonStrings").getString('common.jsan.missing') ); }
                JSAN.errorLevel = "die"; // none, warn, or die
                JSAN.addRepository('/xul/server/');

                JSAN.use('util.error'); g.error = new util.error();
                JSAN.use('util.network'); g.network = new util.network();
                JSAN.use('util.date'); JSAN.use('util.money'); JSAN.use('patron.util');
                JSAN.use('OpenILS.data'); g.data = new OpenILS.data(); g.data.init({'via':'stash'});

                g.error.sdump('D_TRACE','my_init() for patron_info.xul');

                g.patron_id = xul_param('patron_id');

                g.new_note = false;

                g.info_notes_event_listeners = new EventListenerList();

                refresh();

            } catch(E) {
                var err_msg = $("commonStrings").getFormattedString('common.exception', ['patron/info_notes.xul', E]);
                try { g.error.sdump('D_ERROR',err_msg); } catch(E) { dump(err_msg); }
                alert(err_msg);
            }
        }

        function my_cleanup() {
            try {
                g.info_notes_event_listeners.removeAll();
            } catch(E) {
                var err_msg = $("commonStrings").getFormattedString('common.exception', ['patron/info_notes.xul', E]);
                try { g.error.sdump('D_ERROR',err_msg); } catch(E) { dump(err_msg); }
                alert(err_msg);
            }
        }

        function refresh() {
            retrieve_notes(); render_notes();
        }

        function retrieve_notes() {
            if (g.new_note) {
                g.notes = g.network.simple_request('FM_AUN_RETRIEVE_ALL.authoritative',[ ses(), { 'patronid' : g.patron_id } ]).reverse();
                g.new_note = false;
            } else {
                g.notes = g.network.simple_request('FM_AUN_RETRIEVE_ALL.authoritative',[ ses(), { 'patronid' : g.patron_id } ]).reverse();
            }
        }

        function apply(node,field,value) {
            util.widgets.apply(
                node,'name',field,
                function(n) {
                    switch(n.nodeName) {
                        case 'description' : n.appendChild( document.createTextNode( value ) ); break;
                        case 'label' : n.value = value; break;
                        default : n.value = value; break;
                    }
                }
            );
        }

        function render_notes() {
            JSAN.use('util.widgets'); util.widgets.remove_children('notes_panel');
            var np = $('notes_panel');
            var hbox = document.createElement('hbox'); np.appendChild(hbox);
            var btn = document.createElement('button'); hbox.appendChild(btn);
            btn.setAttribute('label', $("patronStrings").getString('staff.patron.info_notes.render_notes.add_new_note.label'));
            btn.setAttribute('accesskey', $("patronStrings").getString('staff.patron.info_notes.render_notes.add_new_note.accesskey'));
            btn.setAttribute('oncommand','new_note()');

            for (var i = 0; i < g.notes.length; i++) {

                /* template */
                var node = $('note_template').cloneNode(true); np.appendChild(node); node.hidden = false;
                apply(node,'create_date',util.date.formatted_date(g.notes[i].create_date(),'%{localized}'));
                util.widgets.apply(node,'name','create_date',
                    function(n){n.setAttribute("tooltiptext", $("patronStrings").getFormattedString('staff.patron.info_notes.render_notes.tooltiptext', [g.notes[i].id(), g.notes[i].creator()]));}
                );
                apply(node,'title',g.notes[i].title());
                if (get_bool(g.notes[i].pub())) {
                    apply(node, 'pub', $("patronStrings").getString('staff.patron.info_notes.render_notes.pub.patron_visible'));
                } else {
                    apply(node, 'pub', $("patronStrings").getString('staff.patron.info_notes.render_notes.pub.staff_only') );
                }
                apply(node,'value',g.notes[i].value());
                apply(node,'id',g.notes[i].id());
                apply(node,'creator',g.notes[i].creator());

                /* button bar */
                var hb = document.createElement('hbox');
                np.appendChild(hb);
                var btn1 = document.createElement('button');
                hb.appendChild(btn1);
                btn1.setAttribute('label',$("patronStrings").getString('staff.patron.info_notes.render_notes.btn1.delete_note.label'));
                btn1.setAttribute('image',"/xul/server/skin/media/images/up_arrow.gif");

                g.info_notes_event_listeners.add(btn1, 
                    'command',
                    function(id){ 
                        return function() { 
                            var r = g.error.yns_alert(
                                $("patronStrings").getFormattedString('staff.patron.info_notes.render_notes.delete_note_message',[g.notes[id].title(), util.date.formatted_date(g.notes[id].create_date(),'%{localized}')]),
                                $("patronStrings").getString('staff.patron.info_notes.render_notes.delete_note_title'),
                                $("commonStrings").getString('common.yes'),
                                $("commonStrings").getString('common.no'),
                                null,
                                $("commonStrings").getString('common.check_to_confirm')
                            ); 
                            if (r == 0) {
                                g.network.simple_request('FM_AUN_DELETE',[ses(),g.notes[id].id()]);
                                setTimeout(function(){ 
                                    g.new_note = true;
                                    alert($("patronStrings").getString('staff.patron.info_notes.render_notes.note_deleted'));
                                    refresh();
                                },0);
                            }
                        }
                     }
                    (i), false
                    );
                    var btn2 = document.createElement('button');
                    hb.appendChild(btn2);
                    btn2.setAttribute('label',$("patronStrings").getString('staff.patron.info_notes.render_notes.btn2.print_note.label'));
                    btn2.setAttribute('image',"/xul/server/skin/media/images/up_arrow.gif");

                    g.info_notes_event_listeners.add(btn2, 
                        'command',
                        function(id){ return function() { 
                            try {
                                JSAN.use('patron.util'); 
                                var patron_obj = patron.util.retrieve_fleshed_au_via_id(ses(),g.patron_id);
                                var staff_obj = patron.util.retrieve_name_via_id( ses(), g.notes[id].creator() );
                                JSAN.use('util.print');
                                var p = new util.print();
                                p.simple(
                                    '<hr/>'
                                    + '<p>'+ $("patronStrings").getString('staff.patron.info_notes.render_notes.pertaining_to') + ' ' + 
                                        patron.util.format_name( patron_obj ) + ' : ' 
                                    + patron_obj.card().barcode() + '</p>'
                                    + '<p><b>"' + g.notes[id].title() + '"</b>'
                                    + $("patronStrings").getFormattedString('staff.patron.info_notes.render_notes.created_on', [util.date.formatted_date(g.notes[id].create_date(),'%{localized}'), staff_obj[0], g.data.hash.aou[ staff_obj[3] ].shortname()]) 
                                    + '</p><p>'
                                    + g.notes[id].value()
                                    + '</p><hr/>'
                                );
                            } catch(E) {
                                g.error.standard_unexpected_error_alert($("patronStrings").getFormattedString('staff.patron.info_notes.render_notes.printing_note_num', [g.notes[id].id()]), E);
                            }
                        }
                    }(i), false
                );
            }

        }
        
        function new_note() {
            try {
                var xml = '<groupbox xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" flex="1">';
                xml += '<caption label="'+$("patronStrings").getString('staff.patron.info_notes.new_note.label')+'"/><grid flex="1"><columns><column/><column flex="1"/></columns><rows><row>';
                xml += '<label value="'+$("patronStrings").getString('staff.patron.info_notes.new_note.patron_visible.value')+'"/><checkbox id="pub" name="fancy_data"/></row>';
                xml += '<row><label value="'+$("patronStrings").getString('staff.patron.info_notes.new_note.title.value')+'"/><textbox id="title" name="fancy_data" context="clipboard"/></row>';
                xml += '<row><label value="'+$("patronStrings").getString('staff.patron.info_notes.new_note.note.value')+'"/><textbox multiline="true" id="note" name="fancy_data" context="clipboard"/></row>';
                var show_initials = String( g.data.hash.aous['ui.staff.require_initials.patron_info_notes'] ) == 'true';
                if (show_initials) {
                    xml += '<row><label value="'+$("patronStrings").getString('staff.patron.info_notes.new_note.initials.value')+'"/><textbox id="initials" name="fancy_required_data" context="clipboard"/></row>';
                }
                xml += '<row><spacer/><hbox><button label="'+$("patronStrings").getString('staff.patron.info_notes.new_note.cancel.label')+'" name="fancy_cancel"';
                xml += ' accesskey="'+$("patronStrings").getString('staff.patron.info_notes.new_note.cancel.accesskey')+'"/>';
                xml += '<button label="'+$("patronStrings").getString('staff.patron.info_notes.new_note.add.label')+'"';
                xml += ' accesskey="'+$("patronStrings").getString('staff.patron.info_notes.new_note.add.accesskey')+'" name="fancy_submit"/></hbox></row></rows></grid></groupbox>';
                JSAN.use('util.window'); var win = new util.window();
                var fancy_prompt_data = win.open(
                    urls.XUL_FANCY_PROMPT,
                    'fancy_prompt', 'chrome,resizable,modal,width=700,height=500',
                    { 'xml' : xml, 'focus' : 'title', 'title' : $("patronStrings").getString('staff.patron.info_notes.new_note.add_note_title') }
                );
                if (fancy_prompt_data.fancy_status == 'complete') {
                    //alert(js2JSON(g.data.fancy_prompt_data));
                    var note = new aun();
                    note.isnew(1);
                    note.title( fancy_prompt_data.title );
                    if (fancy_prompt_data.initials) {
                        fancy_prompt_data.note = fancy_prompt_data.note 
                            + $("commonStrings").getFormattedString('staff.initials.format',[fancy_prompt_data.initials,util.date.formatted_date(new Date(),'%F'), ses('ws_ou_shortname')]);
                    }
                    note.value( fancy_prompt_data.note );
                    note.pub( get_bool( fancy_prompt_data.pub ) ? get_db_true() : get_db_false() );
                    note.usr( g.patron_id );
                    var r = g.network.simple_request('FM_AUN_CREATE',[ ses(), note ]);
                    if (typeof r.ilsevent != 'undefined') throw(r);
                    setTimeout(function(){
                        g.new_note = true;
                        refresh();
                    },0);
                }
            } catch(E) {
                g.error.standard_unexpected_error_alert($("patronStrings").getString('staff.patron.info_notes.new_note.note_not_created'),E);
            }
        }

    ]]>
    </script>
    
    <messagecatalog id="patronStrings" src="/xul/server/locale/<!--#echo var='locale'-->/patron.properties"/>

    <stack hidden="true" id="note_template" flex="1" minheight="50px">
        <groupbox flex="1" style="background-color: black;"/>
        <groupbox flex="1" style="background-color: #FFDE00; border-top-right-radius: 35px;" >
            <hbox>
                <description name="title" class="copyable" style="font-weight: bold"/>
                <spacer flex="1"/>
                <description name="create_date" class="copyable" style="font-weight: bold"/>
                <description name="pub" class="copyable" style="font-weight: bold"/>
            </hbox>
            <description class="copyable" name="value"/>
        </groupbox>
    </stack>

    <vbox flex="1" class="my_overflow" id="notes_panel">
    </vbox>


</window>

