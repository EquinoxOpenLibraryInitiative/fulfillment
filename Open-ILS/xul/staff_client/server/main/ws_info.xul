<?xml version="1.0" encoding="UTF-8"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Main, Authentication Window -->
<!--
 vim:noet:sw=4:ts=4:
-->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- PRESENTATION -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/global.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window PUBLIC "" ""[
    <!--#include virtual="/opac/locale/${locale}/lang.dtd"-->
]>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>

<window id="wsinfo_win" 
    onload="try { wsinfo_init(); } catch(E) { alert(E); }"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


    <!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
    <!-- BEHAVIOR -->
    <script type="text/javascript">var myPackageDir = 'open_ils_staff_client'; var IAMXUL = true; var g = {};</script>
    <scripts id="openils_util_scripts"/>

    <script type="text/javascript" src="/xul/server/main/JSAN.js"/>
    <script>
    <![CDATA[

        function wsinfo_init() {

            document.getElementById('register_btn').disabled = true;
            document.getElementById('wsname').disabled = true;
            document.getElementById('wsname').value = document.getElementById('commonStrings').getString('staff.main.gen_offline_widgets.please_wait');

            if (typeof JSAN == 'undefined') {
                throw(document.getElementById("commonStrings").getString('common.jsan.missing'));
            }
            /////////////////////////////////////////////////////////////////////////////

            JSAN.errorLevel = "die"; // none, warn, or die
            JSAN.addRepository('/xul/server/');

            JSAN.use('util.error'); g.error = new util.error();
            JSAN.use('OpenILS.data'); g.data = new OpenILS.data(); g.data.init({'via':'stash'});
            JSAN.use('util.network'); g.network = new util.network();
            JSAN.use('util.widgets');
            JSAN.use('util.functional');
            JSAN.use('util.fm_utils');

            g.user = g.network.simple_request( 'FM_AU_RETRIEVE_VIA_SESSION', [ xulG.auth.session.key ] );

            g.my_lib = g.user.home_ou();

            g.aout_list = g.network.simple_request(
                'FM_AOUT_RETRIEVE',
                [ ]
            );
            g.aout_hash = {};
            for (var i = 0; i < g.aout_list.length; i++) {
                g.aout_hash[ g.aout_list[i].id() ] = g.aout_list[i];
            }

            var work_ous = g.network.simple_request(
                'PERM_RETRIEVE_WORK_OU',
                [ xulG.auth.session.key, 'REGISTER_WORKSTATION']
            );
            if (work_ous.length == 0) {
                alert(document.getElementById('commonStrings').getString('staff.main.gen_offline_widgets.workstation_registration_denied'));
                xulG.auth.logoff();
                return;
            }
            g.my_libs = [];
            for (var i = 0; i < work_ous.length; i++ ) {
                var perm_depth = findOrgDepth( work_ous[i] );

                g.my_libs_tree = g.network.simple_request(
                    'FM_AOU_DESCENDANTS_RETRIEVE',
                    [ work_ous[i], perm_depth ]
                );
                if (!instanceOf(g.my_libs_tree,aou)) { /* FIXME - workaround for weird descendants call result */
                    g.my_libs_tree = g.my_libs_tree[0];
                }
                g.my_libs = g.my_libs.concat( util.fm_utils.flatten_ou_branch( g.my_libs_tree ) );
            }

            g.my_libs_shortname_hash = {};
            g.my_libs_ou_hash = {};
            g.my_deduped_libs = [];
            for (var i = 0; i < g.my_libs.length; i++) {
                if (typeof g.my_libs_shortname_hash[ g.my_libs[i].id() ] == 'undefined') {
                    g.my_libs_shortname_hash[ g.my_libs[i].id() ] = g.my_libs[i].shortname();
                    g.my_libs_ou_hash[ g.my_libs[i].id() ] = function(o){return o;}(g.my_libs[i]);
                    g.my_deduped_libs.push( g.my_libs[i] );
                }
            }

            g.tb = document.getElementById('wsname');

            var dnsService = Components.classes["@mozilla.org/network/dns-service;1"]
                 .createInstance(Components.interfaces.nsIDNSService);

            render_menulist();

            document.getElementById('register_btn').disabled = false;
            document.getElementById('wsname').disabled = false;
            if(dnsService.myHostName && dnsService.myHostName.toLowerCase() != 'localhost')
                g.tb.value = dnsService.myHostName;
            else
                g.tb.value = '';

            document.getElementById('wsname').focus();
        }

        function render_menulist() {
            var x = document.getElementById('placeholder');
            util.widgets.remove_children( x );

            var default_lib = g.my_lib; 
            try {
                if (typeof g.my_libs_ou_hash[ default_lib ] == 'undefined') {
                    default_lib = null;
                } else {
                    if ( !get_bool( g.aout_hash[ g.my_libs_ou_hash[ default_lib ].ou_type() ].can_have_users() ) ) {
                        default_lib = null;
                    }
                }
            } catch(E) {
                dump('Error in ws_info.xul, render_menulist(): ' + E + '\n');
                default_lib = null;
            }

            g.ml = util.widgets.make_menulist( 
                util.functional.map_list( 
                    g.my_deduped_libs,
                    function(obj) { 
                        if (!default_lib) {
                            if ( get_bool( g.aout_hash[ obj.ou_type() ].can_have_users() ) ) default_lib = obj.id();
                        }
                        return [ 
                            obj.shortname(), 
                            obj.id(), 
                            ( !get_bool( g.aout_hash[ obj.ou_type() ].can_have_users() ) ),
                            ( g.aout_hash[ obj.ou_type() ].depth() )
                        ]; 
                    }
                ),
                default_lib
            );

            x.appendChild( g.ml );
        }

        function register() {
            if(g.tb.value.length == 0) {
                alert(document.getElementById('commonStrings').getString('staff.main.gen_offline_widgets.registration.empty'));
                return;
            }
            try {
                var robj = g.network.simple_request(
                    'AUTH_WORKSTATION',
                    [ xulG.auth.session.key, g.my_libs_shortname_hash[ g.ml.value ] + '-' + g.tb.value, g.ml.value ],
                    null,
                    {
                        'title' : document.getElementById('commonStrings').getString('staff.main.gen_offline_widgets.registration.override'),
                        'overridable_events' : [ 
                            1703 /* WORKSTATION_NAME_EXISTS */
                        ]
                    }
                );

                if (typeof robj.ilsevent != 'undefined') {
                    switch(Number(robj.ilsevent)) {
                        case -1 : g.error.standard_network_error_alert(); break;
                        case 1703 /* WORKSTATION_NAME_EXISTS */ : /* handled with override request */ break;
                        case 1001 /* NO_SESSION */ : /* handled with request dialog */ break;
                        default: g.error.standard_unexpected_error_alert(document.getElementById('commonStrings').getFormattedString('staff.main.gen_offline_widgets.registration.error', ['1']), robj); break;
                    }
                } else {
                    g.data.ws_info[ xulG.auth.controller.view.server_prompt.value ] = { 
                        'name' : g.my_libs_shortname_hash[ g.ml.value ] + '-' + g.tb.value, 
                        'owning_lib' : g.ml.value,
                        'lib_shortname' : g.my_libs_shortname_hash[ g.ml.value ]
                    };
                    xulG.file.get('ws_info');
                    xulG.file.set_object(g.data.ws_info);
                    alert(document.getElementById('commonStrings').getString('staff.main.gen_offline_widgets.registration.success'));
                    xulG.auth.logoff();
                }
            } catch(E) {
                g.error.standard_unexpected_error_alert(document.getElementById('commonStrings').getFormattedString('staff.main.gen_offline_widgets.registration.error', ['2']) ,E);
            }
        }

    ]]>
    </script>

    <vbox flex="1" class="my_overflow">
        <description id="desc" hidden="true">
            &staff.main.ws_info.entry;
        </description>
            <grid style="border: solid thick red;">
                <columns>
                    <column/>
                    <column/>
                </columns>
                <rows>
                    <row>
                        <label value="&staff.main.ws_info.name;" control="wsname"/>
                        <textbox id="wsname"  context="clipboard"/>
                    </row>
                    <row>
                        <label value="&staff.main.ws_info.organization;" control="placeholder"/>
                        <hbox id="placeholder" flex="1"/>
                    </row>
                    <row>
                        <button id="register_btn" label="&staff.main.ws_info.register_btn.label;" accesskey="&staff.main.ws_info.register_btn.accesskey;" oncommand="register();"/>
                        <button id="help_btn" label="&staff.main.ws_info.help_btn.label;" accesskey="&staff.main.ws_info.help_btn.accesskey;" oncommand="alert(document.getElementById('desc').textContent); document.getElementById('wsname').focus();"/>
                    </row>
                </rows>
            </grid>
    </vbox>
</window>

